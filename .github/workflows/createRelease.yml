name: Publish Release

on:
  push:
    branches:
      - develop

jobs:
  publish-release:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Fetch all commits and tags
      - name: Fetch all commits and tags
        run: git fetch --tags --prune --unshallow

      # Step 3: Extract version from the latest commit
      - name: Extract Version
        id: version
        run: |
          VERSION=$(git log -1 --pretty=%B | grep -oP '(?<=release/)[0-9]+\.[0-9]+\.[0-9]+')
          if [ -z "$VERSION" ]; then
            echo "Error: No version found in the last commit message."
            exit 1
          fi
          echo "version=$VERSION" >> $GITHUB_ENV
          echo "Extracted version: $VERSION"

      # Step 4: Determine the previous tag
      - name: Determine Previous Tag
        id: previous_tag
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ || echo "none")
          echo "prev_tag=$PREV_TAG" >> $GITHUB_ENV

      # Step 5: Generate release notes
      - name: Generate Release Notes
        id: release_notes
        run: |
          # Prepare What's Changed
          if [ "$PREV_TAG" != "none" ]; then
            COMMITS=$(git log $PREV_TAG..HEAD --pretty=format:"- %s (by %an) in PR #%h")
          else
            COMMITS=$(git log --pretty=format:"- %s (by %an) in PR #%h")
          fi

          # Prepare Contributors
          CONTRIBUTORS=$(git log $PREV_TAG..HEAD --pretty=format:"%an <%ae>" | sort | uniq)

          # Prepare Full Changelog Link
          if [ "$PREV_TAG" != "none" ]; then
            CHANGELOG="[Full Changelog](https://github.com/${{ github.repository }}/compare/$PREV_TAG...develop)"
          else
            CHANGELOG="[Full Changelog](https://github.com/${{ github.repository }}/commits/develop)"
          fi

          # Save release notes
          echo "## What's Changed" >> release_notes.md
          echo "$COMMITS" >> release_notes.md
          echo "" >> release_notes.md
          echo "## Contributors" >> release_notes.md
          echo "$CONTRIBUTORS" >> release_notes.md
          echo "" >> release_notes.md
          echo "## Full Changelog" >> release_notes.md
          echo "$CHANGELOG" >> release_notes.md

      # Step 6: Create GitHub Release
      - name: Create Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHub API Token
        run: |
          gh release create v${{ env.version }} \
            --title "Release v${{ env.version }}" \
            --notes-file release_notes.md \
            --target develop
